const { expect } = require('chai');
const docGenerator = require('../../build/Release/tik-forge');

describe('Document Generator Unit Tests', () => {
    before(function() {
        // Skip all tests if Pandoc is not installed
        try {
            docGenerator.init();
        } catch (error) {
            if (error.message.includes('PandocNotFound')) {
                console.log('Skipping all tests: Pandoc not installed');
                this.skip();
            } else {
                throw error;
            }
        }
    });

    describe('PDF Generation', () => {
        it('should initialize correctly', () => {
            expect(docGenerator.init).to.be.a('function');
            expect(docGenerator.generatePDF).to.be.a('function');
            expect(docGenerator.generateExcel).to.be.a('function');
        });

        it('should handle empty HTML', async () => {
            try {
                await docGenerator.generatePDF('');
                expect.fail('Should throw error for empty HTML');
            } catch (error) {
                expect(error).to.exist;
            }
        });

        it('should handle invalid HTML', async () => {
            try {
                await docGenerator.generatePDF('<invalid>');
                expect.fail('Should throw error for invalid HTML');
            } catch (error) {
                expect(error).to.exist;
            }
        });

        it('should generate PDF from valid HTML', async () => {
            const html = '<html><body><h1>Test</h1></body></html>';
            const result = await docGenerator.generatePDF(html);
            expect(result).to.be.instanceof(Buffer);
            expect(result.length).to.be.above(0);
        });
    });

    describe('Excel Generation', () => {
        beforeEach(function() {
            // Skip Excel tests if Pandoc is not installed
            if (!isPandocInstalled()) {
                console.log('Skipping Excel test: Pandoc not installed');
                this.skip();
            }
        });

        it('should generate Excel from HTML table', async () => {
            const html = `
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>1</td>
                            <td>Test Item</td>
                        </tr>
                    </tbody>
                </table>
            `;
            
            const result = await docGenerator.generateExcel(html);
            expect(result).to.be.instanceof(Buffer);
            expect(result.length).to.be.above(0);
        });

        it('should handle empty input', async () => {
            try {
                await docGenerator.generateExcel('');
                expect.fail('Should throw error for empty input');
            } catch (error) {
                expect(error).to.exist;
            }
        });

        it('should handle invalid HTML', async () => {
            try {
                await docGenerator.generateExcel('<invalid>');
                expect.fail('Should throw error for invalid HTML');
            } catch (error) {
                expect(error).to.exist;
            }
        });

        it('should handle large tables', async function() {
            this.timeout(5000); // Increase timeout for large data
            
            // สร้าง HTML table ขนาดใหญ่
            let html = '<table>';
            html += '<tr><th>ID</th><th>Name</th><th>Value</th></tr>';
            
            for (let i = 0; i < 1000; i++) {
                html += `<tr><td>${i}</td><td>Item ${i}</td><td>${i * 100}</td></tr>`;
            }
            html += '</table>';

            const result = await docGenerator.generateExcel(html);
            expect(result).to.be.instanceof(Buffer);
            expect(result.length).to.be.above(0);
        });
    });
});

// Helper function to check if Pandoc is installed
function isPandocInstalled() {
    try {
        require('child_process').execSync('pandoc --version');
        return true;
    } catch (error) {
        return false;
    }
} 